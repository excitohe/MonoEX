import os

from yacs.config import CfgNode as CN

_C = CN()

# -----------------------------------------------------------------------------
# INPUT: BASIC
_C.INPUT = CN()
_C.INPUT.HEIGHT_TRAIN = 384
_C.INPUT.WIDTH_TRAIN = 1280
_C.INPUT.HEIGHT_TEST = 384
_C.INPUT.WIDTH_TEST = 1280
_C.INPUT.PIXEL_MEAN = [0.485, 0.456, 0.406]
_C.INPUT.PIXEL_STD = [0.229, 0.224, 0.225]
_C.INPUT.TO_BGR = False

_C.INPUT.HEATMAP_CENTER = "3D"
_C.INPUT.HEATMAP_RATIO = 0.5
_C.INPUT.HEATMAP_ADJUST = False
_C.INPUT.KEYPOINT_VISIBLE_MODIFY = False
_C.INPUT.APPROX_3D_CENTER = "intersect"  # ["intersect", "clamp"]
_C.INPUT.ORIENT_MODE = "head-axis"  # multi-bin
_C.INPUT.ORIENT_BIN_SIZE = 4  # multi-bin

_C.INPUT.FLIP = CN({"ENABLE": True})
_C.INPUT.FLIP.RATIO = 0.5
_C.INPUT.AFFINE = CN({"ENABLE": True})
_C.INPUT.AFFINE.RATIO = 0.3
_C.INPUT.AFFINE.SHIFT = 0.2
_C.INPUT.AFFINE.SCALE = 0.4

# -----------------------------------------------------------------------------
# DATASETS: BASIC
_C.DATASETS = CN()
_C.DATASETS.STYLE = "MonoFlex"
_C.DATASETS.TRAIN = ()
_C.DATASETS.TEST = ()
_C.DATASETS.TRAIN_SPLIT = ""
_C.DATASETS.TEST_SPLIT = ""
_C.DATASETS.CLASS_NAMES = ("Car", "Pedestrian", "Cyclist")

_C.DATASETS.USE_RIGHT_IMAGE = False
_C.DATASETS.USE_OBJECTS_OUTSIDE = False
_C.DATASETS.MAX_OBJECTS = 40
_C.DATASETS.MIN_RADIUS = 0.0
_C.DATASETS.MAX_RADIUS = 0.0
_C.DATASETS.CENTER_RADIUS_RATIO = 0.1

_C.DATASETS.FILTER_ANNO = CN({"ENABLE": False})
_C.DATASETS.FILTER_ANNO.PARAMS = [0.9, 20]
_C.DATASETS.FILTER_ANNO.TRUNC_RATIO = 0.9
_C.DATASETS.FILTER_ANNO.MIN_BOXSIZE = 20

# -----------------------------------------------------------------------------
# DATALOADER:
_C.DATALOADER = CN()
_C.DATALOADER.NUM_WORKERS = 8
_C.DATALOADER.SIZE_DIVISIBILITY = 0
_C.DATALOADER.ASPECT_RATIO_GROUPING = False
_C.DATALOADER.SAMPLER = "TrainingSampler"

# -----------------------------------------------------------------------------
# MODEL:
_C.MODEL = CN()
_C.MODEL.DEVICE = "cuda"
_C.MODEL.WEIGHT = ""
_C.MODEL.PRETRAIN = True
_C.MODEL.DETECTOR_ARCH = "KeypointDetector"
_C.MODEL.NORM = "BN"
_C.MODEL.REDUCE_LOSS_NORM = True
_C.MODEL.USE_SYNC_BN = False
_C.MODEL.INPLACE_ABN = False

# MODEL:BACKBONE:DLA(common)
_C.MODEL.BACKBONE = CN()
_C.MODEL.BACKBONE.NAME = "build_dlanet_backbone"
_C.MODEL.BACKBONE.CONV_BODY = "dla34"
_C.MODEL.BACKBONE.FREEZE_AT = 0
_C.MODEL.BACKBONE.DOWN_RATIO = 4
_C.MODEL.BACKBONE.NORM = "BN"  # ['BN', 'GN', 'SyncBN', 'FrozenBN']
_C.MODEL.BACKBONE.USE_DCN = True

# MODEL:BACKBONE:RESNETS
_C.MODEL.BACKBONE.RESNETS = CN()
_C.MODEL.BACKBONE.RESNETS.NUM_STAGES = 4
_C.MODEL.BACKBONE.RESNETS.STRIDES = [1, 2, 2, 2]
_C.MODEL.BACKBONE.RESNETS.DILATIONS = [1, 1, 1, 1]
_C.MODEL.BACKBONE.RESNETS.OUT_INDICES = [-1, 0, 1, 2, 3]
_C.MODEL.BACKBONE.RESNETS.NORM_EVAL = True

# MODEL:BACKBONE:SWINT
_C.MODEL.BACKBONE.SWINT = CN()
_C.MODEL.BACKBONE.SWINT.EMBED_DIM = 96
_C.MODEL.BACKBONE.SWINT.OUT_FEATURES = ["stage2", "stage3", "stage4", "stage5"]
_C.MODEL.BACKBONE.SWINT.DEPTHS = [2, 2, 6, 2]
_C.MODEL.BACKBONE.SWINT.NUM_HEADS = [3, 6, 12, 24]
_C.MODEL.BACKBONE.SWINT.WINDOW_SIZE = 7
_C.MODEL.BACKBONE.SWINT.MLP_RATIO = 4
_C.MODEL.BACKBONE.SWINT.DROP_PATH_RATE = 0.2
_C.MODEL.BACKBONE.SWINT.APE = False

# MODEL:GROUP_NORM
_C.MODEL.GROUP_NORM = CN()
_C.MODEL.GROUP_NORM.DIM_PER_GP = -1
_C.MODEL.GROUP_NORM.NUM_GROUPS = 32
_C.MODEL.GROUP_NORM.EPSILON = 1e-5

# MODEL:HEAD:
_C.MODEL.HEAD = CN()
_C.MODEL.HEAD.NAME = "MonoFlexHead"
_C.MODEL.HEAD.INIT_P = 0.1
_C.MODEL.HEAD.NORM = "BN"
_C.MODEL.HEAD.NORM_MOMENTUM = 0.1
_C.MODEL.HEAD.MODIFY_INVALID_KEYPOINT_DEPTH = False
_C.MODEL.HEAD.KEYPOINT_LOSS = "L1"
_C.MODEL.HEAD.KEYPOINT_NORM_FACTOR = 1.0
_C.MODEL.HEAD.OUTPUT_DEPTH = "direct"
_C.MODEL.HEAD.CORNER_LOSS_DEPTH = "direct"
_C.MODEL.HEAD.DEPTH_MODE = "exp"  # ["linear", "exp"]
_C.MODEL.HEAD.DEPTH_RANGE = [0.1, 100]
_C.MODEL.HEAD.DEPTH_REF = (26.494627, 16.05988)
_C.MODEL.HEAD.REGRESSION_OFFSET_STAT = [-0.5844396972302358, 9.075032501413093]
_C.MODEL.HEAD.REGRESSION_OFFSET_STAT_NORMAL = [-0.01571878324572745, 0.05915441457040611]
_C.MODEL.HEAD.USE_UNCERTAINTY = False
_C.MODEL.HEAD.UNCERTAINTY_INIT = True
_C.MODEL.HEAD.UNCERTAINTY_RANGE = [-10, 10]
_C.MODEL.HEAD.UNCERTAINTY_WEIGHT = 1.0
_C.MODEL.HEAD.DIM_MODE = ['linear', True, False]  # ["linear", "log"]; mean; stds;
_C.MODEL.HEAD.DIM_MEAN = ((3.8840, 1.5261, 1.6286), (0.8423, 1.7607, 0.6602), (1.7635, 1.7372, 0.5968))
_C.MODEL.HEAD.DIM_STDS = ((0.4259, 0.1367, 0.1022), (0.2349, 0.1133, 0.1427), (0.1766, 0.0948, 0.1242))
# (Car, Cyclist, Pedestrian)
_C.MODEL.HEAD.DIM_REF = ((3.88, 1.63, 1.53), (0.88, 1.73, 0.67), (1.78, 1.70, 0.58))
_C.MODEL.HEAD.DIM_WEIGHT = [1, 1, 1]
_C.MODEL.HEAD.NUM_CHANNEL = 256
_C.MODEL.HEAD.REG_HEAD_ITEMS = [['dim_2d'], ['offset_3d'], ['dim_3d'], ['ori_cls', 'ori_ofs'], ['depth']]
_C.MODEL.HEAD.REG_HEAD_CHANS = [[
    4,
], [
    2,
], [
    3,
], [
    4,
    2,
], [
    1,
]]
_C.MODEL.HEAD.LOSS_TYPES = ["PenaltyReducedFocalLoss", "L1", "giou", "berhu"]
_C.MODEL.HEAD.LOSS_NAMES = [
    'hmp_loss', 'center_loss', 'box_loss', 'dep_loss', 'offset_loss', 'ori_loss', 'dim_loss', 'corner_loss'
]
_C.MODEL.HEAD.LOSS_UNCERTAINTY = [True, True, True, False, False, True, True, True]
_C.MODEL.HEAD.LOSS_INIT_WEIGHT = []
_C.MODEL.HEAD.LOSS_ALPHA = 0.25
_C.MODEL.HEAD.LOSS_GAMMA = 2
_C.MODEL.HEAD.LOSS_PENALTY_ALPHA = 2
_C.MODEL.HEAD.LOSS_PENALTY_BETA = 4
_C.MODEL.HEAD.HEATMAP_TYPE = "centernet"
_C.MODEL.HEAD.TRUNCATION_OFFSET_LOSS = "L1"
_C.MODEL.HEAD.TRUNCATION_OUTPUT_FUSION = "replace"
_C.MODEL.HEAD.CENTER_SAMPLE = 'center'
_C.MODEL.HEAD.CENTER_MODE = "max"  # ["area", "max"]

_C.MODEL.HEAD.EDGE_FUSION = False
_C.MODEL.HEAD.EDGE_FUSION_KERNEL_SIZE = 3
_C.MODEL.HEAD.EDGE_FUSION_NORM = "BN"
_C.MODEL.HEAD.EDGE_FUSION_RELU = False

# MODEL:DEPTH_REFINE:
_C.MODEL.DEPTH_REFINE = CN()
_C.MODEL.DEPTH_REFINE.ENABLE = False
_C.MODEL.DEPTH_REFINE.DETACH_DEPTH = True
_C.MODEL.DEPTH_REFINE.USE_EARLY_FEAT = True
_C.MODEL.DEPTH_REFINE.REFINE_THRESH_TYPE = '2d'
_C.MODEL.DEPTH_REFINE.REFINE_THRESH = 0.2
_C.MODEL.DEPTH_REFINE.NUM_CHANNEL = [64, 128]
_C.MODEL.DEPTH_REFINE.OUTPUT_SIZE = [14, 14]
_C.MODEL.DEPTH_REFINE.JITTER = [2, 1]
_C.MODEL.DEPTH_REFINE.BIN_NUM = 5
_C.MODEL.DEPTH_REFINE.BIN_SIZE = 1

# -----------------------------------------------------------------------------
# SOLVER:
_C.SOLVER = CN()
_C.SOLVER.OPTIMIZER = "AdamW"
_C.SOLVER.SCHEDULER = "LambdaLR"
_C.SOLVER.BASE_LR = 3e-3
_C.SOLVER.WEIGHT_DECAY = 1e-5
_C.SOLVER.MAX_ITERATION = 30000  # total steps in iterations
_C.SOLVER.MAX_EPOCHS = 70  # total steps in epochs
# SOLVER: onecycle: not work
_C.SOLVER.MOMS = [0.95, 0.85]  # larger lr <-> smaller momentum
_C.SOLVER.PCT_START = 0.4
_C.SOLVER.DIV_FACTOR = 10  # cycle = max_lr <-> max_lr / div_factor
# SOLVER: multi-step decay
_C.SOLVER.STEPS = (20000, 25000)  # steps in iterations
_C.SOLVER.DECAY_EPOCH_STEPS = [35, 45]  # steps in epochs
_C.SOLVER.LR_DECAY = 0.1  # lr = lr * lr_decay
_C.SOLVER.LR_CLIP = 0.0000001  # minimal learning rate
# SOLVER: warmup
_C.SOLVER.LR_WARMUP = False
_C.SOLVER.WARMUP_EPOCH = 1
_C.SOLVER.WARMUP_STEPS = -1
_C.SOLVER.GRAD_NORM_CLIP = -1  # use grad clip if > 0
# SOLVER: save in epoch manner
_C.SOLVER.SAVE_CHECKPOINT_INTERVAL = 1000
_C.SOLVER.EVAL_INTERVAL = 2000
_C.SOLVER.SAVE_CHECKPOINT_EPOCH_INTERVAL = 5
_C.SOLVER.EVAL_EPOCH_INTERVAL = 2
_C.SOLVER.EVAL_AND_SAVE_EPOCH = False
# SOLVER: lr factor
_C.SOLVER.BIAS_LR_FACTOR = 2.0  # bias lr
_C.SOLVER.BACKBONE_LR_FACTOR = 1.0
_C.SOLVER.LOAD_OPTIMIZER_SCHEDULER = True
_C.SOLVER.IMS_PER_BATCH = 32
_C.SOLVER.MASTER_BATCH = -1

# -----------------------------------------------------------------------------
# TEST:
_C.TEST = CN()
_C.TEST.SINGLE_GPU_TEST = True
_C.TEST.IMS_PER_BATCH = 1
_C.TEST.PRED_2D = True
_C.TEST.UNCERTAINTY_AS_CONFIDENCE = False
# TEST: metric
_C.TEST.METRIC = ['R40']
_C.TEST.EVAL_DIS_IOUS = False
_C.TEST.EVAL_DEPTH = False
_C.TEST.EVAL_DEPTH_METHODS = []
# TEST: nms
_C.TEST.USE_NMS = 'none'  # ['none', '2d', '3d']
_C.TEST.NMS_THRESH = -1.
_C.TEST.NMS_CLASS_AGNOSTIC = False
# TEST: num_det per image
_C.TEST.DETECTIONS_PER_IMG = 50
_C.TEST.DETECTIONS_THRESHOLD = 0.1
_C.TEST.VISUALIZE_THRESHOLD = 0.4

# -----------------------------------------------------------------------------
# MISC:
_C.OUTPUT_DIR = "./outputs/logs"
_C.SEED = -1
_C.CUDNN_BENCHMARK = True
_C.START_TIME = 0
_C.PATHS_CATALOG = os.path.join(os.path.dirname(__file__), "catalogs.py")
